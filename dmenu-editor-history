#!/usr/bin/env bash

# DMENU-EDITOR-HISTORY
# --------------------

# Bash script that provides an awesome editor indepentend history list of
# opened files, via dmenu. See --help for details.

# CONFIG ------------------------------------------------------------------------

# Default commands
cmd_editor=(subl)
cmd_dmenu=(dmenu -p 'Hist' -i -l 20)
cmd_find=(find "$HOME")

# Indicators
indc_find='--- SEARCH ---' # To enter find mode
indc_dir='[D]'             # Directories
indc_link='[L]'            # Symbolic links
indc_home='[~]'            # Home directory

# -------------------------------------------------------------------------------

# HELPER FUNCTIONS --------------------------------------------------------------

err() {
    # $1 = exit code
    # $2 = error string

    if [[ $1 != 0 ]]; then
        printf "Error $0: $2!\n" 1>&2
        exit $1
    fi
}

full_path() {
    # Convert a relative path to an absolute path
    # $1 examples:
    #   * 'file'
    #   * './file/'
    #   * '/usr/etc/file'
    #   * '/'
    #   * '../../dirname'
    #   * '/dirname/../dirname'
    #   * 'file name with spaces'

    # Stripping potential trailing forward slash
    input="${1%/}"

    case $input in
        '') # Root
            path='/' ;;

        /..*) # Invalid
            path='/' ;;

        .) # Current dir
            path="$PWD" ;;

        ..) # Parent dir
            cwd="${PWD##*/}"
            path="${PWD%/"$cwd"}" ;;

        */*) # Path
            if [[ ${input:0:1} == '/' ]]; then
                path=""
                input="${input#/}"
            else
                path="$PWD"
            fi

            local IFS='/'
            for chunk in $input; do
                case $chunk in
                    ..) # Remove the last dir from path
                        path="${path%/*}" ;;
                    *)
                        path="$path/$chunk" ;;
                esac
            done ;;

        *) # File in cwd
            path="$PWD/${input##*/}" ;;
    esac

    printf '%s' "$path"
}

# -------------------------------------------------------------------------------

help() {
    read -d '' <<-EOF
		MAIN USAGE:
		--sel                - Select previously opened file or search for a new
		                       (intended to be run via a custom hotkey)
		--open               - Open a new file from the terminal
		                       (needs to be the last argument)
		                       (intended to be run via a shell alias)

		CHANGE BASIC PROGRAMS:
		--editor="program"   - Text editor (now: '${cmd_editor[@]}')
		--dmenu="program"    - dmenu command (now: '${cmd_dmenu[@]}')
		--find="program"     - Command to search files (now: '${cmd_find[@]}')

		OTHER:
		-p, --purge          - Clear history
		-c, --clean          - Remove files from history that doesn't exist
		-h, --help           - Display this usage information
	EOF
    printf '%s' "$REPLY"
}

# File to store history cache in
if [[ -d $XDG_CACHE_HOME ]]; then
    hist="$XDG_CACHE_HOME/dmenu-editor-history"
else
    hist="$HOME/.dmenu-editor-history"
fi
[[ -f $hist ]] || touch "$hist"

rm_old() {
    # Remove non-existant files from history

    while read -r; do
        [[ -e "$REPLY" ]] && keep+=("$REPLY")
    done < "$hist"

    if [[ ${#keep[@]} -gt 0 ]]; then
        printf '%s\n' "${keep[@]}" > "$hist"
    else
        > "$hist"
    fi
}

# Argument parsing
while [[ -n $1 ]]; do
    case $1 in
        --help|-h)
            help
            exit 0 ;;

        --purge|-p)
            read -p "Delete $hist? [y/n]: " del
            case "$del" in
                y|Y|yes|Yes|YES) rm -v "$hist" ;;
            esac
            exit 0 ;;

        --clean|-c)
            rm_old
            exit 0 ;;

        --editor=*)
            cmd_editor=(${1#*=})
            shift ;;

        --dmenu=*)
            cmd_dmenu=(${1#*=})
            shift ;;

        --find=*)
            cmd_find=(${1#*=})
            shift ;;

        --sel)
            setting='select'
            shift ;;

        --open)
            setting='open'
            if [[ -n $2 ]]; then
                open_file="$2"
                shift 2
            else
                shift
            fi ;;

        *)
            err 1 "invalid option '$1', see --help for usage" ;;
    esac
done

entry() {
    # Insert new history entry into cache file
    # $1 = absolute path to a file

    newhist+=("$1")

    # Previous history without duplicate of new entry
    dup_found=0
    while read -r; do
        if ! ((dup_found)); then
            if [[ $REPLY == "$1" ]]; then
                dup_found=1
                continue 2
            fi
        fi
        newhist+=("$REPLY")
    done < "$hist"

    printf '%s\n' "${newhist[@]}" > "$hist"
}

case "$setting" in
    select)
        display+=("$indc_find")
        declare -A lookup

        while read -r; do
            if [[ $REPLY == $HOME ]]; then
                indc="$indc_home "
            elif [[ -L $REPLY ]]; then
                indc="$indc_link "
            elif [[ -d $REPLY ]]; then
                indc="$indc_dir "
            else
                indc=""
            fi

            dir="${REPLY%/*}"       # Remove name
            file="${REPLY#"$dir/"}" # Name
            file="${file:-/}"       # Exeption for /
            dir="${dir#"$HOME"}"    # Remove potential home prefix

            [[ $dir == '' ]] || dir=" (${dir#/})"

            final="$indc$file$dir"

            display+=("$final")
            lookup+=("$final" "$REPLY")
        done < "$hist"

        # Pipe into dmenu
        selected="$(printf "%s\n" "${display[@]}" | "${cmd_dmenu[@]}")"
        [[ -z $selected ]] && err 1 'empty selection'
        unset display

        if [[ $selected == "$indc_find" ]]; then
            filename=$("${cmd_find[@]}" | "${cmd_dmenu[@]}")
            [[ -z $filename ]] && err 1 'empty selection'
        else
            filename="${lookup[$selected]}"

            # Testing if file has been deleted or not saved
            if ! [[ -e $filename ]]; then
                rm_old
                err 1 "$filename does not exist"
            fi
        fi

        unset lookup

        entry "$filename"
        "${cmd_editor[@]}" "$filename" ;;

    open)
        # If file is empty
        if [[ -z $open_file ]]; then
            "${cmd_editor[@]}"
            exit
        fi

        path="$(full_path "$open_file")"

        entry "$path"
        "${cmd_editor[@]}" "$path" ;;

    *)
        err 1 'needs option --sel or --open to do anything. See -h for help'
esac